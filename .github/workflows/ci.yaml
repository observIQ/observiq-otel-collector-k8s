name: Test
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        k8s-version:
          - "latest"
          - "v1.23.0"
          - "v1.22.0"
          - "v1.21.0"
          - "v1.20.0"
          - "v1.19.0"
          - "v1.18.0"
        format:
          - "docker"
          - "containerd"

    steps:
    - uses: actions/checkout@v2

    - name: Install Minikube
      uses: ./.github/actions/minikube
      with:
        k8s_version: ${{ matrix.k8s-version }}
        k8s_runtime: ${{ matrix.format }}

    - id: Install Cert Manager
      run: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml

    - id: Wait For Cert Manager
      run: |
        kubectl rollout status deployment.apps/cert-manager --timeout=60s
        kubectl rollout status deployment.apps/cert-manager-cainjector --timeout=10s
        kubectl rollout status deployment.apps/cert-manager-webhook --timeout=10s

    - id: Install OpenTelemetry Operator
      run: kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml

    - id: Wait For OpenTelemetry Operator
      run: kubectl rollout status deployment.apps/opentelemetry-operator-controller-manager --timeout=60s

    # We just need a secret that can be mounted, sending telemetry to
    # GCP is not the goal.
    - id: Create Fake GCP Credentials
      run: kubectl create secret generic gcp-credentials --from-literal=ci=true -n default

    - id: Install Kustomize
      run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
      shell: bash

    - id: Kustomize Output
      run: kustomize build environments/minikube

    - id: Kustomize Deploy
      run: kustomize build environments/minikube | kubectl apply -f -

    - id: Wait For GCP Gateway Collector
      run: kubectl rollout status statefulset.apps/observiq-gcp-gateway-collector --timeout=60s

    - id: Wait For Cluster Collector
      run: kubectl rollout status statefulset.apps/observiq-cluster-collector --timeout=60s

    - id: Wait For Node Collector
      run: kubectl rollout status daemonset.apps/observiq-node-collector --timeout=60s

    - id: Deploy Redis w/ Side Car Collector
      run: kubectl apply -f app/redis/redis.yaml

    - id: Wait For Redis w/ Side Car Collector
      run: kubectl rollout status deployment.apps/redis --timeout=60s
